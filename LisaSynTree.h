#ifndef __LISA_SYNTREE__
#define __LISA_SYNTREE__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <LisaPascal/LisaTokenType.h>
#include <LisaPascal/LisaToken.h>
#include <QList>

namespace Lisa {

	struct SynTree {
		enum ParserRule {
			R_First = TT_Max + 1,
			R_LisaPascal,
			R_actual_parameter,
			R_actual_parameter_list,
			R_addition_operator,
			R_array_type,
			R_assigOrCall,
			R_assignment_statement_,
			R_block,
			R_body_,
			R_case_label_list,
			R_case_limb,
			R_case_statement,
			R_class_type,
			R_comment_,
			R_compound_statement,
			R_conditional_statement,
			R_constant,
			R_constant_declaration,
			R_constant_declaration_part,
			R_constant_identifier_,
			R_dereferencer,
			R_enumerated_type,
			R_expression,
			R_expression_list,
			R_factor,
			R_field_declaration,
			R_field_designator,
			R_field_identifier,
			R_field_list,
			R_file_type,
			R_final_value,
			R_fixed_part,
			R_for_statement,
			R_formal_parameter_list,
			R_formal_parameter_section,
			R_function_declaration,
			R_function_heading,
			R_function_identifier_,
			R_goto_statement,
			R_identifier_list,
			R_identifier_list2,
			R_if_statement,
			R_implementation_part,
			R_index,
			R_index_type,
			R_initial_value,
			R_interface_part,
			R_label_,
			R_label_declaration_part,
			R_member_group,
			R_method_block,
			R_method_interface,
			R_multiplication_operator,
			R_non_regular_unit,
			R_ordinal_type,
			R_otherwise_clause,
			R_parameter_declaration,
			R_pointer_type,
			R_procedure_and_function_declaration_part,
			R_procedure_and_function_interface_part,
			R_procedure_declaration,
			R_procedure_heading,
			R_procedure_identifier_,
			R_procedure_statement_,
			R_program_,
			R_program_heading,
			R_program_parameters,
			R_qualifier,
			R_record_type,
			R_regular_unit,
			R_relational_operator,
			R_repeat_statement,
			R_repetitive_statement,
			R_result_type,
			R_set_literal,
			R_set_type,
			R_sign,
			R_simple_expression,
			R_simple_statement,
			R_simple_type,
			R_size_attribute,
			R_statement,
			R_statement_part,
			R_statement_sequence,
			R_string_type,
			R_structured_statement,
			R_structured_type,
			R_subrange_type,
			R_subroutine_part,
			R_tag_field,
			R_term,
			R_type_,
			R_type_declaration,
			R_type_declaration_part,
			R_type_identifier,
			R_unit_heading,
			R_unsigned_integer,
			R_unsigned_number,
			R_uses_clause,
			R_variable_declaration,
			R_variable_declaration_part,
			R_variable_identifier,
			R_variable_reference,
			R_variant,
			R_variant_part,
			R_while_statement,
			R_with_statement,
			R_Last
		};
		SynTree(quint16 r = Tok_Invalid, const Token& = Token() );
		SynTree(const Token& t ):d_tok(t){}
        ~SynTree() { foreach(SynTree* n, d_children) delete n; }

		static const char* rToStr( quint16 r );

		Lisa::Token d_tok;
		QList<SynTree*> d_children;
	};

}
#endif // __LISA_SYNTREE__
