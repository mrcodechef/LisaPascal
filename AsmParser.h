

// This file was automatically generated by Coco/R; don't modify it.
#if !defined(Asm_COCO_PARSER_H__)
#define Asm_COCO_PARSER_H__

#include <QStack>
#include <LisaPascal/AsmSynTree.h>


namespace Asm {


class PpLexer;
class Parser {
private:
	enum {
		_EOF=0,
		_T_Literals_=1,
		_T_Hash=2,
		_T_Amp=3,
		_T_Lpar=4,
		_T_Rpar=5,
		_T_Star=6,
		_T_Plus=7,
		_T_Comma=8,
		_T_Minus=9,
		_T_Slash=10,
		_T_Colon=11,
		_T_Semi=12,
		_T_Lt=13,
		_T_LtGt=14,
		_T_Eq=15,
		_T_Gt=16,
		_T_Hat=17,
		_T_Bar=18,
		_T_Tilde=19,
		_T_Keywords_=20,
		_T_ABCD=21,
		_T_ADD=22,
		_T_ADDA=23,
		_T_ADDI=24,
		_T_ADDQ=25,
		_T_ADDX=26,
		_T_AND=27,
		_T_ANDI=28,
		_T_ASCII=29,
		_T_ASL=30,
		_T_ASR=31,
		_T_BCC=32,
		_T_BCHG=33,
		_T_BCLR=34,
		_T_BCS=35,
		_T_BEQ=36,
		_T_BGE=37,
		_T_BGT=38,
		_T_BHI=39,
		_T_BHS=40,
		_T_BLE=41,
		_T_BLO=42,
		_T_BLS=43,
		_T_BLT=44,
		_T_BMI=45,
		_T_BNE=46,
		_T_BPL=47,
		_T_BRA=48,
		_T_BSET=49,
		_T_BSR=50,
		_T_BTST=51,
		_T_BVC=52,
		_T_BYTE=53,
		_T_CHK=54,
		_T_CLR=55,
		_T_CMP=56,
		_T_CMPA=57,
		_T_CMPI=58,
		_T_CMPM=59,
		_T_DBEQ=60,
		_T_DBF=61,
		_T_DBRA=62,
		_T_DEF=63,
		_T_DIVS=64,
		_T_DIVU=65,
		_T_ELSE=66,
		_T_END=67,
		_T_ENDC=68,
		_T_ENDM=69,
		_T_EOR=70,
		_T_EORI=71,
		_T_EQU=72,
		_T_EXG=73,
		_T_EXT=74,
		_T_FUNC=75,
		_T_IF=76,
		_T_ILLEGAL=77,
		_T_INCLUDE=78,
		_T_JMP=79,
		_T_JSR=80,
		_T_LEA=81,
		_T_LINK=82,
		_T_LIST=83,
		_T_LSL=84,
		_T_LSR=85,
		_T_MACRO=86,
		_T_MACROLIST=87,
		_T_MOVE=88,
		_T_MOVEA=89,
		_T_MOVEM=90,
		_T_MOVEP=91,
		_T_MOVEQ=92,
		_T_MULS=93,
		_T_MULU=94,
		_T_NBCD=95,
		_T_NEG=96,
		_T_NEGX=97,
		_T_NOLIST=98,
		_T_NOMACROLIST=99,
		_T_NOP=100,
		_T_NOPATCHLIST=101,
		_T_NOT=102,
		_T_OR=103,
		_T_ORG=104,
		_T_ORI=105,
		_T_PATCHLIST=106,
		_T_PEA=107,
		_T_PROC=108,
		_T_REF=109,
		_T_RESET=110,
		_T_ROL=111,
		_T_ROR=112,
		_T_RORG=113,
		_T_ROXL=114,
		_T_ROXR=115,
		_T_RTE=116,
		_T_RTR=117,
		_T_RTS=118,
		_T_SBCD=119,
		_T_SEG=120,
		_T_SNE=121,
		_T_STOP=122,
		_T_SUB=123,
		_T_SUBA=124,
		_T_SUBI=125,
		_T_SUBQ=126,
		_T_SUBX=127,
		_T_SWAP=128,
		_T_TAS=129,
		_T_TITLE=130,
		_T_TRAP=131,
		_T_TRAPV=132,
		_T_TST=133,
		_T_UNLK=134,
		_T_WORD=135,
		_T_Specials_=136,
		_T_number=137,
		_T_string=138,
		_T_ident=139,
		_T_substitute=140,
		_T_label=141,
		_T_Comment=142,
		_T_eol=143,
		_T_dotW=144,
		_T_dotL=145,
		_T_dotB=146,
		_T_dotS=147,
		_T_Eof=148,
		_T_MaxToken_=149
	};
	int maxT;

	int errDist;
	int minErrDist;

	void SynErr(int n, const char* ctx = 0);
	void Get();
	void Expect(int n, const char* ctx = 0);
	bool StartOf(int s);
	void ExpectWeak(int n, int follow);
	bool WeakSeparator(int n, int syFol, int repFol);
    void SynErr(int line, int col, int n, const char* ctx, const QString&, const QString& path );

public:
	PpLexer *scanner;
	struct Error
	{
		QString msg;
		int row, col;
		QString path;
	};
	QList<Error> errors;
	
	void error(int row, int col, const QString& msg, const QString& path)
	{
		Error e;
		e.row = row;
		e.col = col;
		e.msg = msg;
		e.path = path;
		errors.append(e);
	}

	Token d_cur;
	Token d_next;
	QList<Token> d_comments;
	struct TokDummy
	{
		int kind;
	};
	TokDummy d_dummy;
	TokDummy *la;			// lookahead token
	
	int peek( quint8 la = 1 );

    void RunParser();

    
Asm::SynTree d_root;
	QStack<Asm::SynTree*> d_stack;
	void addTerminal() {
		Asm::SynTree* n = new Asm::SynTree( d_cur ); d_stack.top()->d_children.append(n);
	}



	Parser(PpLexer *scanner);
	~Parser();
	void SemErr(const char* msg);

	void program();
	void line();
	void factor();
	void addrop();
	void directive();
	void statement();
	void argument();
	void expression();
	void filename();
	void macrodef();
	void mnemonic();
	void size();
	void op();
	void reg();

	void Parse();

}; // end Parser

} // namespace


#endif

