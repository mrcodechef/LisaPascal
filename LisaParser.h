#ifndef __LISA_PARSER__
#define __LISA_PARSER__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <LisaPascal/LisaSynTree.h>

namespace Lisa {

	class Scanner {
	public:
		virtual Token next() = 0;
		virtual Token peek(int offset) = 0;
	};

	class Parser {
	public:
		Parser(Scanner* s):scanner(s) {}
		void RunParser();
		SynTree root;
		struct Error {
		    QString msg;
		    int row, col;
		    QString path;
		    Error( const QString& m, int r, int c, const QString& p):msg(m),row(r),col(c),path(p){}
		};
		QList<Error> errors;
	protected:
		void LisaPascal(SynTree*);
		void program_(SynTree*);
		void program_heading(SynTree*);
		void program_parameters(SynTree*);
		void uses_clause(SynTree*);
		void identifier_list2(SynTree*);
		void regular_unit(SynTree*);
		void unit_heading(SynTree*);
		void interface_part(SynTree*);
		void implementation_part(SynTree*);
		void non_regular_unit(SynTree*);
		void block(SynTree*);
		void label_declaration_part(SynTree*);
		void label_(SynTree*);
		void constant_declaration_part(SynTree*);
		void constant_declaration(SynTree*);
		void constant(SynTree*);
		void type_declaration_part(SynTree*);
		void type_declaration(SynTree*);
		void variable_declaration_part(SynTree*);
		void variable_declaration(SynTree*);
		void procedure_and_function_interface_part(SynTree*);
		void procedure_and_function_declaration_part(SynTree*);
		void subroutine_part(SynTree*);
		void method_block(SynTree*);
		void procedure_declaration(SynTree*);
		void body_(SynTree*);
		void function_declaration(SynTree*);
		void statement_part(SynTree*);
		void procedure_heading(SynTree*);
		void function_heading(SynTree*);
		void result_type(SynTree*);
		void formal_parameter_list(SynTree*);
		void formal_parameter_section(SynTree*);
		void parameter_declaration(SynTree*);
		void statement_sequence(SynTree*);
		void statement(SynTree*);
		void simple_statement(SynTree*);
		void assigOrCall(SynTree*);
		void goto_statement(SynTree*);
		void structured_statement(SynTree*);
		void compound_statement(SynTree*);
		void repetitive_statement(SynTree*);
		void while_statement(SynTree*);
		void repeat_statement(SynTree*);
		void for_statement(SynTree*);
		void initial_value(SynTree*);
		void final_value(SynTree*);
		void conditional_statement(SynTree*);
		void if_statement(SynTree*);
		void case_statement(SynTree*);
		void case_limb(SynTree*);
		void case_label_list(SynTree*);
		void otherwise_clause(SynTree*);
		void with_statement(SynTree*);
		void actual_parameter_list(SynTree*);
		void actual_parameter(SynTree*);
		void expression(SynTree*);
		void simple_expression(SynTree*);
		void term(SynTree*);
		void factor(SynTree*);
		void relational_operator(SynTree*);
		void addition_operator(SynTree*);
		void multiplication_operator(SynTree*);
		void variable_reference(SynTree*);
		void qualifier(SynTree*);
		void index(SynTree*);
		void field_designator(SynTree*);
		void dereferencer(SynTree*);
		void set_literal(SynTree*);
		void member_group(SynTree*);
		void type_(SynTree*);
		void simple_type(SynTree*);
		void ordinal_type(SynTree*);
		void string_type(SynTree*);
		void size_attribute(SynTree*);
		void enumerated_type(SynTree*);
		void subrange_type(SynTree*);
		void structured_type(SynTree*);
		void array_type(SynTree*);
		void index_type(SynTree*);
		void set_type(SynTree*);
		void file_type(SynTree*);
		void pointer_type(SynTree*);
		void class_type(SynTree*);
		void method_interface(SynTree*);
		void record_type(SynTree*);
		void field_list(SynTree*);
		void fixed_part(SynTree*);
		void field_declaration(SynTree*);
		void variant_part(SynTree*);
		void tag_field(SynTree*);
		void variant(SynTree*);
		void field_identifier(SynTree*);
		void variable_identifier(SynTree*);
		void type_identifier(SynTree*);
		void identifier_list(SynTree*);
		void expression_list(SynTree*);
		void unsigned_integer(SynTree*);
		void unsigned_number(SynTree*);
		void sign(SynTree*);
	protected:
		Token cur;
		Token la;
		Scanner* scanner;
		void next();
		Token peek(int off);
		void invalid(const char* what);
		bool expect(int tt, bool pkw, const char* where);
		void addTerminal(SynTree* st);
	};
}
#endif // include
