#ifndef __ASM_TOKENTYPE__
#define __ASM_TOKENTYPE__
// This file was automatically generated by EbnfStudio; don't modify it!


#include <QByteArray>

namespace Asm {
	enum TokenType {
		Tok_Invalid = 0,

		TT_Literals,
		Tok_Hash,
		Tok_Amp,
		Tok_Lpar,
		Tok_Rpar,
		Tok_Star,
		Tok_Plus,
		Tok_Comma,
		Tok_Minus,
		Tok_Slash,
		Tok_Colon,
		Tok_Semi,
		Tok_Lt,
		Tok_LtGt,
		Tok_Eq,
		Tok_Gt,
		Tok_Hat,
		Tok_Bar,
		Tok_Tilde,

		TT_Keywords,
		Tok_ABCD,
		Tok_ADD,
		Tok_ADDA,
		Tok_ADDI,
		Tok_ADDQ,
		Tok_ADDX,
		Tok_AND,
		Tok_ANDI,
		Tok_ASCII,
		Tok_ASL,
		Tok_ASR,
		Tok_BCC,
		Tok_BCHG,
		Tok_BCLR,
		Tok_BCS,
		Tok_BEQ,
		Tok_BGE,
		Tok_BGT,
		Tok_BHI,
		Tok_BHS,
		Tok_BLE,
		Tok_BLO,
		Tok_BLS,
		Tok_BLT,
		Tok_BMI,
		Tok_BNE,
		Tok_BPL,
		Tok_BRA,
		Tok_BSET,
		Tok_BSR,
		Tok_BTST,
		Tok_BVC,
		Tok_BYTE,
		Tok_CHK,
		Tok_CLR,
		Tok_CMP,
		Tok_CMPA,
		Tok_CMPI,
		Tok_CMPM,
		Tok_DBEQ,
		Tok_DBF,
		Tok_DBRA,
		Tok_DEF,
		Tok_DIVS,
		Tok_DIVU,
		Tok_ELSE,
		Tok_END,
		Tok_ENDC,
		Tok_ENDM,
		Tok_EOR,
		Tok_EORI,
		Tok_EQU,
		Tok_EXG,
		Tok_EXT,
		Tok_FUNC,
		Tok_IF,
		Tok_ILLEGAL,
		Tok_INCLUDE,
		Tok_JMP,
		Tok_JSR,
		Tok_LEA,
		Tok_LINK,
		Tok_LIST,
		Tok_LSL,
		Tok_LSR,
		Tok_MACRO,
		Tok_MACROLIST,
		Tok_MOVE,
		Tok_MOVEA,
		Tok_MOVEM,
		Tok_MOVEP,
		Tok_MOVEQ,
		Tok_MULS,
		Tok_MULU,
		Tok_NBCD,
		Tok_NEG,
		Tok_NEGX,
		Tok_NOLIST,
		Tok_NOMACROLIST,
		Tok_NOP,
		Tok_NOPATCHLIST,
		Tok_NOT,
		Tok_OR,
		Tok_ORG,
		Tok_ORI,
		Tok_PATCHLIST,
		Tok_PEA,
		Tok_PROC,
		Tok_REF,
		Tok_RESET,
		Tok_ROL,
		Tok_ROR,
		Tok_RORG,
		Tok_ROXL,
		Tok_ROXR,
		Tok_RTE,
		Tok_RTR,
		Tok_RTS,
		Tok_SBCD,
		Tok_SEG,
		Tok_SNE,
		Tok_STOP,
		Tok_SUB,
		Tok_SUBA,
		Tok_SUBI,
		Tok_SUBQ,
		Tok_SUBX,
		Tok_SWAP,
		Tok_TAS,
		Tok_TITLE,
		Tok_TRAP,
		Tok_TRAPV,
		Tok_TST,
		Tok_UNLK,
		Tok_WORD,

		TT_Specials,
		Tok_number,
		Tok_string,
		Tok_ident,
		Tok_substitute,
		Tok_label,
		Tok_Comment,
		Tok_eol,
		Tok_dotW,
		Tok_dotL,
		Tok_dotB,
		Tok_dotS,
		Tok_Eof,

		TT_MaxToken,

		TT_Max
	};

	const char* tokenTypeString( int ); // Pretty with punctuation chars
	const char* tokenTypeName( int ); // Just the names without punctuation chars
	bool tokenTypeIsLiteral( int );
	bool tokenTypeIsKeyword( int );
	bool tokenTypeIsSpecial( int );
	TokenType tokenTypeFromString( const QByteArray& str, int* pos = 0 );
}
#endif // __ASM_TOKENTYPE__
