#ifndef __LISA_TOKENTYPE__
#define __LISA_TOKENTYPE__
// This file was automatically generated by EbnfStudio; don't modify it!


#include <QByteArray>

#define LISA_CLASCAL

namespace Lisa {
	enum TokenType {
		Tok_Invalid = 0,

		TT_Literals,
		Tok_Lpar,
		Tok_Latt,
		Tok_Rpar,
		Tok_Star,
		Tok_Ratt,
		Tok_Plus,
		Tok_Comma,
		Tok_Minus,
		Tok_Dot,
		Tok_2Dot,
		Tok_Slash,
		Tok_Colon,
		Tok_ColonEq,
		Tok_Semi,
		Tok_Lt,
		Tok_Leq,
		Tok_LtGt,
		Tok_Eq,
		Tok_Gt,
		Tok_Geq,
		Tok_At,
		Tok_Lbrack,
		Tok_Rbrack,
		Tok_Hat,
		Tok_Lbrace,
		Tok_Rbrace,

		TT_Keywords,
		Tok_and,
		Tok_array,
		Tok_begin,
		Tok_case,
		Tok_const,
		Tok_div,
		Tok_do,
		Tok_downto,
		Tok_else,
		Tok_end,
		Tok_external,
		Tok_file,
		Tok_for,
		Tok_forward,
		Tok_function,
		Tok_goto,
		Tok_if,
		Tok_implementation,
		Tok_in,
		Tok_inline,
		Tok_interface,
		Tok_intrinsic,
		Tok_label,
		Tok_methods,
		Tok_mod,
		Tok_nil,
		Tok_not,
		Tok_of,
		Tok_or,
		Tok_otherwise,
		Tok_packed,
		Tok_procedure,
		Tok_program,
		Tok_record,
		Tok_repeat,
		Tok_set,
		Tok_shared,
		Tok_string,
		Tok_subclass,
		Tok_then,
		Tok_to,
		Tok_type,
		Tok_unit,
		Tok_until,
		Tok_uses,
		Tok_var,
		Tok_while,
		Tok_with,

		TT_Specials,
		Tok_identifier,
		Tok_unsigned_real,
		Tok_digit_sequence,
		Tok_hex_digit_sequence,
		Tok_string_literal,
		Tok_Comment,
		Tok_Directive,
		Tok_Eof,

		TT_MaxToken,

		TT_Max
	};

	const char* tokenTypeString( int ); // Pretty with punctuation chars
	const char* tokenTypeName( int ); // Just the names without punctuation chars
	bool tokenTypeIsLiteral( int );
	bool tokenTypeIsKeyword( int );
	bool tokenTypeIsSpecial( int );
	TokenType tokenTypeFromString( const QByteArray& str, int* pos = 0 );
	TokenType tokenTypeFromString( const char* str, quint32 len, int* pos = 0 );
}
#endif // __LISA_TOKENTYPE__
